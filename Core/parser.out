Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression SMCLN
Rule 2     expression -> decl_function
Rule 3     expression -> number
Rule 4     expression -> expression_list
Rule 5     expression -> ID LPAR RPAR
Rule 6     expression_list -> expression expression
Rule 7     decl_function -> FUNC ID LPAR RPAR compound
Rule 8     compound -> LBR expression RBR
Rule 9     compound -> LBR RBR
Rule 10    expression -> expression PLUS expression
Rule 11    expression -> expression MINUS expression
Rule 12    expression -> expression MUL expression
Rule 13    expression -> expression DIV expression
Rule 14    expression -> ID ASSIGN expression
Rule 15    expression -> VAR ID
Rule 16    number -> NUM
Rule 17    condition -> number EQUAL number
Rule 18    condition -> number GREATER number
Rule 19    condition -> number LESSER number
Rule 20    condition -> ID EQUAL ID
Rule 21    condition -> ID GREATER ID
Rule 22    condition -> ID LESSER ID
Rule 23    expression -> IF LPAR condition RPAR compound
Rule 24    expression -> IF LPAR condition RPAR compound ELSE compound

Terminals, with rules where they appear

ASSIGN               : 14
DIV                  : 13
ELSE                 : 24
EQUAL                : 17 20
FUNC                 : 7
GREATER              : 18 21
ID                   : 5 7 14 15 20 20 21 21 22 22
IF                   : 23 24
LBR                  : 8 9
LESSER               : 19 22
LPAR                 : 5 7 23 24
MINUS                : 11
MUL                  : 12
NUM                  : 16
PLUS                 : 10
RBR                  : 8 9
RPAR                 : 5 7 23 24
SMCLN                : 1
VAR                  : 15
error                : 

Nonterminals, with rules where they appear

compound             : 7 23 24 24
condition            : 23 24
decl_function        : 2
expression           : 1 6 6 8 10 10 11 11 12 12 13 13 14 0
expression_list      : 4
number               : 3 17 17 18 18 19 19

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression SMCLN
    (2) expression -> . decl_function
    (3) expression -> . number
    (4) expression -> . expression_list
    (5) expression -> . ID LPAR RPAR
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression MUL expression
    (13) expression -> . expression DIV expression
    (14) expression -> . ID ASSIGN expression
    (15) expression -> . VAR ID
    (23) expression -> . IF LPAR condition RPAR compound
    (24) expression -> . IF LPAR condition RPAR compound ELSE compound
    (7) decl_function -> . FUNC ID LPAR RPAR compound
    (16) number -> . NUM
    (6) expression_list -> . expression expression

    ID              shift and go to state 5
    VAR             shift and go to state 6
    IF              shift and go to state 7
    FUNC            shift and go to state 8
    NUM             shift and go to state 9

    expression                     shift and go to state 1
    decl_function                  shift and go to state 2
    number                         shift and go to state 3
    expression_list                shift and go to state 4

state 1

    (0) S' -> expression .
    (1) expression -> expression . SMCLN
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . MUL expression
    (13) expression -> expression . DIV expression
    (6) expression_list -> expression . expression
    (1) expression -> . expression SMCLN
    (2) expression -> . decl_function
    (3) expression -> . number
    (4) expression -> . expression_list
    (5) expression -> . ID LPAR RPAR
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression MUL expression
    (13) expression -> . expression DIV expression
    (14) expression -> . ID ASSIGN expression
    (15) expression -> . VAR ID
    (23) expression -> . IF LPAR condition RPAR compound
    (24) expression -> . IF LPAR condition RPAR compound ELSE compound
    (7) decl_function -> . FUNC ID LPAR RPAR compound
    (16) number -> . NUM
    (6) expression_list -> . expression expression

    SMCLN           shift and go to state 11
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MUL             shift and go to state 14
    DIV             shift and go to state 15
    ID              shift and go to state 5
    VAR             shift and go to state 6
    IF              shift and go to state 7
    FUNC            shift and go to state 8
    NUM             shift and go to state 9

    expression                     shift and go to state 10
    decl_function                  shift and go to state 2
    number                         shift and go to state 3
    expression_list                shift and go to state 4

state 2

    (2) expression -> decl_function .

    SMCLN           reduce using rule 2 (expression -> decl_function .)
    PLUS            reduce using rule 2 (expression -> decl_function .)
    MINUS           reduce using rule 2 (expression -> decl_function .)
    MUL             reduce using rule 2 (expression -> decl_function .)
    DIV             reduce using rule 2 (expression -> decl_function .)
    ID              reduce using rule 2 (expression -> decl_function .)
    VAR             reduce using rule 2 (expression -> decl_function .)
    IF              reduce using rule 2 (expression -> decl_function .)
    FUNC            reduce using rule 2 (expression -> decl_function .)
    NUM             reduce using rule 2 (expression -> decl_function .)
    $end            reduce using rule 2 (expression -> decl_function .)
    RBR             reduce using rule 2 (expression -> decl_function .)


state 3

    (3) expression -> number .

    SMCLN           reduce using rule 3 (expression -> number .)
    PLUS            reduce using rule 3 (expression -> number .)
    MINUS           reduce using rule 3 (expression -> number .)
    MUL             reduce using rule 3 (expression -> number .)
    DIV             reduce using rule 3 (expression -> number .)
    ID              reduce using rule 3 (expression -> number .)
    VAR             reduce using rule 3 (expression -> number .)
    IF              reduce using rule 3 (expression -> number .)
    FUNC            reduce using rule 3 (expression -> number .)
    NUM             reduce using rule 3 (expression -> number .)
    $end            reduce using rule 3 (expression -> number .)
    RBR             reduce using rule 3 (expression -> number .)


state 4

    (4) expression -> expression_list .

    SMCLN           reduce using rule 4 (expression -> expression_list .)
    PLUS            reduce using rule 4 (expression -> expression_list .)
    MINUS           reduce using rule 4 (expression -> expression_list .)
    MUL             reduce using rule 4 (expression -> expression_list .)
    DIV             reduce using rule 4 (expression -> expression_list .)
    ID              reduce using rule 4 (expression -> expression_list .)
    VAR             reduce using rule 4 (expression -> expression_list .)
    IF              reduce using rule 4 (expression -> expression_list .)
    FUNC            reduce using rule 4 (expression -> expression_list .)
    NUM             reduce using rule 4 (expression -> expression_list .)
    $end            reduce using rule 4 (expression -> expression_list .)
    RBR             reduce using rule 4 (expression -> expression_list .)


state 5

    (5) expression -> ID . LPAR RPAR
    (14) expression -> ID . ASSIGN expression

    LPAR            shift and go to state 16
    ASSIGN          shift and go to state 17


state 6

    (15) expression -> VAR . ID

    ID              shift and go to state 18


state 7

    (23) expression -> IF . LPAR condition RPAR compound
    (24) expression -> IF . LPAR condition RPAR compound ELSE compound

    LPAR            shift and go to state 19


state 8

    (7) decl_function -> FUNC . ID LPAR RPAR compound

    ID              shift and go to state 20


state 9

    (16) number -> NUM .

    SMCLN           reduce using rule 16 (number -> NUM .)
    PLUS            reduce using rule 16 (number -> NUM .)
    MINUS           reduce using rule 16 (number -> NUM .)
    MUL             reduce using rule 16 (number -> NUM .)
    DIV             reduce using rule 16 (number -> NUM .)
    ID              reduce using rule 16 (number -> NUM .)
    VAR             reduce using rule 16 (number -> NUM .)
    IF              reduce using rule 16 (number -> NUM .)
    FUNC            reduce using rule 16 (number -> NUM .)
    NUM             reduce using rule 16 (number -> NUM .)
    $end            reduce using rule 16 (number -> NUM .)
    RBR             reduce using rule 16 (number -> NUM .)
    EQUAL           reduce using rule 16 (number -> NUM .)
    GREATER         reduce using rule 16 (number -> NUM .)
    LESSER          reduce using rule 16 (number -> NUM .)
    RPAR            reduce using rule 16 (number -> NUM .)


state 10

    (6) expression_list -> expression expression .
    (1) expression -> expression . SMCLN
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . MUL expression
    (13) expression -> expression . DIV expression
    (6) expression_list -> expression . expression
    (1) expression -> . expression SMCLN
    (2) expression -> . decl_function
    (3) expression -> . number
    (4) expression -> . expression_list
    (5) expression -> . ID LPAR RPAR
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression MUL expression
    (13) expression -> . expression DIV expression
    (14) expression -> . ID ASSIGN expression
    (15) expression -> . VAR ID
    (23) expression -> . IF LPAR condition RPAR compound
    (24) expression -> . IF LPAR condition RPAR compound ELSE compound
    (7) decl_function -> . FUNC ID LPAR RPAR compound
    (16) number -> . NUM
    (6) expression_list -> . expression expression

  ! shift/reduce conflict for SMCLN resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
    $end            reduce using rule 6 (expression_list -> expression expression .)
    RBR             reduce using rule 6 (expression_list -> expression expression .)
    SMCLN           shift and go to state 11
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MUL             shift and go to state 14
    DIV             shift and go to state 15
    ID              shift and go to state 5
    VAR             shift and go to state 6
    IF              shift and go to state 7
    FUNC            shift and go to state 8
    NUM             shift and go to state 9

  ! SMCLN           [ reduce using rule 6 (expression_list -> expression expression .) ]
  ! PLUS            [ reduce using rule 6 (expression_list -> expression expression .) ]
  ! MINUS           [ reduce using rule 6 (expression_list -> expression expression .) ]
  ! MUL             [ reduce using rule 6 (expression_list -> expression expression .) ]
  ! DIV             [ reduce using rule 6 (expression_list -> expression expression .) ]
  ! ID              [ reduce using rule 6 (expression_list -> expression expression .) ]
  ! VAR             [ reduce using rule 6 (expression_list -> expression expression .) ]
  ! IF              [ reduce using rule 6 (expression_list -> expression expression .) ]
  ! FUNC            [ reduce using rule 6 (expression_list -> expression expression .) ]
  ! NUM             [ reduce using rule 6 (expression_list -> expression expression .) ]

    expression                     shift and go to state 10
    decl_function                  shift and go to state 2
    number                         shift and go to state 3
    expression_list                shift and go to state 4

state 11

    (1) expression -> expression SMCLN .

    SMCLN           reduce using rule 1 (expression -> expression SMCLN .)
    PLUS            reduce using rule 1 (expression -> expression SMCLN .)
    MINUS           reduce using rule 1 (expression -> expression SMCLN .)
    MUL             reduce using rule 1 (expression -> expression SMCLN .)
    DIV             reduce using rule 1 (expression -> expression SMCLN .)
    ID              reduce using rule 1 (expression -> expression SMCLN .)
    VAR             reduce using rule 1 (expression -> expression SMCLN .)
    IF              reduce using rule 1 (expression -> expression SMCLN .)
    FUNC            reduce using rule 1 (expression -> expression SMCLN .)
    NUM             reduce using rule 1 (expression -> expression SMCLN .)
    $end            reduce using rule 1 (expression -> expression SMCLN .)
    RBR             reduce using rule 1 (expression -> expression SMCLN .)


state 12

    (10) expression -> expression PLUS . expression
    (1) expression -> . expression SMCLN
    (2) expression -> . decl_function
    (3) expression -> . number
    (4) expression -> . expression_list
    (5) expression -> . ID LPAR RPAR
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression MUL expression
    (13) expression -> . expression DIV expression
    (14) expression -> . ID ASSIGN expression
    (15) expression -> . VAR ID
    (23) expression -> . IF LPAR condition RPAR compound
    (24) expression -> . IF LPAR condition RPAR compound ELSE compound
    (7) decl_function -> . FUNC ID LPAR RPAR compound
    (16) number -> . NUM
    (6) expression_list -> . expression expression

    ID              shift and go to state 5
    VAR             shift and go to state 6
    IF              shift and go to state 7
    FUNC            shift and go to state 8
    NUM             shift and go to state 9

    expression                     shift and go to state 21
    decl_function                  shift and go to state 2
    number                         shift and go to state 3
    expression_list                shift and go to state 4

state 13

    (11) expression -> expression MINUS . expression
    (1) expression -> . expression SMCLN
    (2) expression -> . decl_function
    (3) expression -> . number
    (4) expression -> . expression_list
    (5) expression -> . ID LPAR RPAR
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression MUL expression
    (13) expression -> . expression DIV expression
    (14) expression -> . ID ASSIGN expression
    (15) expression -> . VAR ID
    (23) expression -> . IF LPAR condition RPAR compound
    (24) expression -> . IF LPAR condition RPAR compound ELSE compound
    (7) decl_function -> . FUNC ID LPAR RPAR compound
    (16) number -> . NUM
    (6) expression_list -> . expression expression

    ID              shift and go to state 5
    VAR             shift and go to state 6
    IF              shift and go to state 7
    FUNC            shift and go to state 8
    NUM             shift and go to state 9

    expression                     shift and go to state 22
    decl_function                  shift and go to state 2
    number                         shift and go to state 3
    expression_list                shift and go to state 4

state 14

    (12) expression -> expression MUL . expression
    (1) expression -> . expression SMCLN
    (2) expression -> . decl_function
    (3) expression -> . number
    (4) expression -> . expression_list
    (5) expression -> . ID LPAR RPAR
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression MUL expression
    (13) expression -> . expression DIV expression
    (14) expression -> . ID ASSIGN expression
    (15) expression -> . VAR ID
    (23) expression -> . IF LPAR condition RPAR compound
    (24) expression -> . IF LPAR condition RPAR compound ELSE compound
    (7) decl_function -> . FUNC ID LPAR RPAR compound
    (16) number -> . NUM
    (6) expression_list -> . expression expression

    ID              shift and go to state 5
    VAR             shift and go to state 6
    IF              shift and go to state 7
    FUNC            shift and go to state 8
    NUM             shift and go to state 9

    expression                     shift and go to state 23
    decl_function                  shift and go to state 2
    number                         shift and go to state 3
    expression_list                shift and go to state 4

state 15

    (13) expression -> expression DIV . expression
    (1) expression -> . expression SMCLN
    (2) expression -> . decl_function
    (3) expression -> . number
    (4) expression -> . expression_list
    (5) expression -> . ID LPAR RPAR
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression MUL expression
    (13) expression -> . expression DIV expression
    (14) expression -> . ID ASSIGN expression
    (15) expression -> . VAR ID
    (23) expression -> . IF LPAR condition RPAR compound
    (24) expression -> . IF LPAR condition RPAR compound ELSE compound
    (7) decl_function -> . FUNC ID LPAR RPAR compound
    (16) number -> . NUM
    (6) expression_list -> . expression expression

    ID              shift and go to state 5
    VAR             shift and go to state 6
    IF              shift and go to state 7
    FUNC            shift and go to state 8
    NUM             shift and go to state 9

    expression                     shift and go to state 24
    decl_function                  shift and go to state 2
    number                         shift and go to state 3
    expression_list                shift and go to state 4

state 16

    (5) expression -> ID LPAR . RPAR

    RPAR            shift and go to state 25


state 17

    (14) expression -> ID ASSIGN . expression
    (1) expression -> . expression SMCLN
    (2) expression -> . decl_function
    (3) expression -> . number
    (4) expression -> . expression_list
    (5) expression -> . ID LPAR RPAR
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression MUL expression
    (13) expression -> . expression DIV expression
    (14) expression -> . ID ASSIGN expression
    (15) expression -> . VAR ID
    (23) expression -> . IF LPAR condition RPAR compound
    (24) expression -> . IF LPAR condition RPAR compound ELSE compound
    (7) decl_function -> . FUNC ID LPAR RPAR compound
    (16) number -> . NUM
    (6) expression_list -> . expression expression

    ID              shift and go to state 5
    VAR             shift and go to state 6
    IF              shift and go to state 7
    FUNC            shift and go to state 8
    NUM             shift and go to state 9

    expression                     shift and go to state 26
    decl_function                  shift and go to state 2
    number                         shift and go to state 3
    expression_list                shift and go to state 4

state 18

    (15) expression -> VAR ID .

    SMCLN           reduce using rule 15 (expression -> VAR ID .)
    PLUS            reduce using rule 15 (expression -> VAR ID .)
    MINUS           reduce using rule 15 (expression -> VAR ID .)
    MUL             reduce using rule 15 (expression -> VAR ID .)
    DIV             reduce using rule 15 (expression -> VAR ID .)
    ID              reduce using rule 15 (expression -> VAR ID .)
    VAR             reduce using rule 15 (expression -> VAR ID .)
    IF              reduce using rule 15 (expression -> VAR ID .)
    FUNC            reduce using rule 15 (expression -> VAR ID .)
    NUM             reduce using rule 15 (expression -> VAR ID .)
    $end            reduce using rule 15 (expression -> VAR ID .)
    RBR             reduce using rule 15 (expression -> VAR ID .)


state 19

    (23) expression -> IF LPAR . condition RPAR compound
    (24) expression -> IF LPAR . condition RPAR compound ELSE compound
    (17) condition -> . number EQUAL number
    (18) condition -> . number GREATER number
    (19) condition -> . number LESSER number
    (20) condition -> . ID EQUAL ID
    (21) condition -> . ID GREATER ID
    (22) condition -> . ID LESSER ID
    (16) number -> . NUM

    ID              shift and go to state 29
    NUM             shift and go to state 9

    condition                      shift and go to state 27
    number                         shift and go to state 28

state 20

    (7) decl_function -> FUNC ID . LPAR RPAR compound

    LPAR            shift and go to state 30


state 21

    (10) expression -> expression PLUS expression .
    (1) expression -> expression . SMCLN
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . MUL expression
    (13) expression -> expression . DIV expression
    (6) expression_list -> expression . expression
    (1) expression -> . expression SMCLN
    (2) expression -> . decl_function
    (3) expression -> . number
    (4) expression -> . expression_list
    (5) expression -> . ID LPAR RPAR
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression MUL expression
    (13) expression -> . expression DIV expression
    (14) expression -> . ID ASSIGN expression
    (15) expression -> . VAR ID
    (23) expression -> . IF LPAR condition RPAR compound
    (24) expression -> . IF LPAR condition RPAR compound ELSE compound
    (7) decl_function -> . FUNC ID LPAR RPAR compound
    (16) number -> . NUM
    (6) expression_list -> . expression expression

    SMCLN           reduce using rule 10 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 10 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 10 (expression -> expression PLUS expression .)
    ID              reduce using rule 10 (expression -> expression PLUS expression .)
    VAR             reduce using rule 10 (expression -> expression PLUS expression .)
    IF              reduce using rule 10 (expression -> expression PLUS expression .)
    FUNC            reduce using rule 10 (expression -> expression PLUS expression .)
    NUM             reduce using rule 10 (expression -> expression PLUS expression .)
    $end            reduce using rule 10 (expression -> expression PLUS expression .)
    RBR             reduce using rule 10 (expression -> expression PLUS expression .)
    MUL             shift and go to state 14
    DIV             shift and go to state 15

  ! MUL             [ reduce using rule 10 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 10 (expression -> expression PLUS expression .) ]
  ! SMCLN           [ shift and go to state 11 ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! ID              [ shift and go to state 5 ]
  ! VAR             [ shift and go to state 6 ]
  ! IF              [ shift and go to state 7 ]
  ! FUNC            [ shift and go to state 8 ]
  ! NUM             [ shift and go to state 9 ]

    expression                     shift and go to state 10
    decl_function                  shift and go to state 2
    number                         shift and go to state 3
    expression_list                shift and go to state 4

state 22

    (11) expression -> expression MINUS expression .
    (1) expression -> expression . SMCLN
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . MUL expression
    (13) expression -> expression . DIV expression
    (6) expression_list -> expression . expression
    (1) expression -> . expression SMCLN
    (2) expression -> . decl_function
    (3) expression -> . number
    (4) expression -> . expression_list
    (5) expression -> . ID LPAR RPAR
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression MUL expression
    (13) expression -> . expression DIV expression
    (14) expression -> . ID ASSIGN expression
    (15) expression -> . VAR ID
    (23) expression -> . IF LPAR condition RPAR compound
    (24) expression -> . IF LPAR condition RPAR compound ELSE compound
    (7) decl_function -> . FUNC ID LPAR RPAR compound
    (16) number -> . NUM
    (6) expression_list -> . expression expression

    SMCLN           reduce using rule 11 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 11 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 11 (expression -> expression MINUS expression .)
    ID              reduce using rule 11 (expression -> expression MINUS expression .)
    VAR             reduce using rule 11 (expression -> expression MINUS expression .)
    IF              reduce using rule 11 (expression -> expression MINUS expression .)
    FUNC            reduce using rule 11 (expression -> expression MINUS expression .)
    NUM             reduce using rule 11 (expression -> expression MINUS expression .)
    $end            reduce using rule 11 (expression -> expression MINUS expression .)
    RBR             reduce using rule 11 (expression -> expression MINUS expression .)
    MUL             shift and go to state 14
    DIV             shift and go to state 15

  ! MUL             [ reduce using rule 11 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 11 (expression -> expression MINUS expression .) ]
  ! SMCLN           [ shift and go to state 11 ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! ID              [ shift and go to state 5 ]
  ! VAR             [ shift and go to state 6 ]
  ! IF              [ shift and go to state 7 ]
  ! FUNC            [ shift and go to state 8 ]
  ! NUM             [ shift and go to state 9 ]

    expression                     shift and go to state 10
    decl_function                  shift and go to state 2
    number                         shift and go to state 3
    expression_list                shift and go to state 4

state 23

    (12) expression -> expression MUL expression .
    (1) expression -> expression . SMCLN
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . MUL expression
    (13) expression -> expression . DIV expression
    (6) expression_list -> expression . expression
    (1) expression -> . expression SMCLN
    (2) expression -> . decl_function
    (3) expression -> . number
    (4) expression -> . expression_list
    (5) expression -> . ID LPAR RPAR
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression MUL expression
    (13) expression -> . expression DIV expression
    (14) expression -> . ID ASSIGN expression
    (15) expression -> . VAR ID
    (23) expression -> . IF LPAR condition RPAR compound
    (24) expression -> . IF LPAR condition RPAR compound ELSE compound
    (7) decl_function -> . FUNC ID LPAR RPAR compound
    (16) number -> . NUM
    (6) expression_list -> . expression expression

    SMCLN           reduce using rule 12 (expression -> expression MUL expression .)
    PLUS            reduce using rule 12 (expression -> expression MUL expression .)
    MINUS           reduce using rule 12 (expression -> expression MUL expression .)
    MUL             reduce using rule 12 (expression -> expression MUL expression .)
    DIV             reduce using rule 12 (expression -> expression MUL expression .)
    ID              reduce using rule 12 (expression -> expression MUL expression .)
    VAR             reduce using rule 12 (expression -> expression MUL expression .)
    IF              reduce using rule 12 (expression -> expression MUL expression .)
    FUNC            reduce using rule 12 (expression -> expression MUL expression .)
    NUM             reduce using rule 12 (expression -> expression MUL expression .)
    $end            reduce using rule 12 (expression -> expression MUL expression .)
    RBR             reduce using rule 12 (expression -> expression MUL expression .)

  ! SMCLN           [ shift and go to state 11 ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! MUL             [ shift and go to state 14 ]
  ! DIV             [ shift and go to state 15 ]
  ! ID              [ shift and go to state 5 ]
  ! VAR             [ shift and go to state 6 ]
  ! IF              [ shift and go to state 7 ]
  ! FUNC            [ shift and go to state 8 ]
  ! NUM             [ shift and go to state 9 ]

    expression                     shift and go to state 10
    decl_function                  shift and go to state 2
    number                         shift and go to state 3
    expression_list                shift and go to state 4

state 24

    (13) expression -> expression DIV expression .
    (1) expression -> expression . SMCLN
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . MUL expression
    (13) expression -> expression . DIV expression
    (6) expression_list -> expression . expression
    (1) expression -> . expression SMCLN
    (2) expression -> . decl_function
    (3) expression -> . number
    (4) expression -> . expression_list
    (5) expression -> . ID LPAR RPAR
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression MUL expression
    (13) expression -> . expression DIV expression
    (14) expression -> . ID ASSIGN expression
    (15) expression -> . VAR ID
    (23) expression -> . IF LPAR condition RPAR compound
    (24) expression -> . IF LPAR condition RPAR compound ELSE compound
    (7) decl_function -> . FUNC ID LPAR RPAR compound
    (16) number -> . NUM
    (6) expression_list -> . expression expression

    SMCLN           reduce using rule 13 (expression -> expression DIV expression .)
    PLUS            reduce using rule 13 (expression -> expression DIV expression .)
    MINUS           reduce using rule 13 (expression -> expression DIV expression .)
    MUL             reduce using rule 13 (expression -> expression DIV expression .)
    DIV             reduce using rule 13 (expression -> expression DIV expression .)
    ID              reduce using rule 13 (expression -> expression DIV expression .)
    VAR             reduce using rule 13 (expression -> expression DIV expression .)
    IF              reduce using rule 13 (expression -> expression DIV expression .)
    FUNC            reduce using rule 13 (expression -> expression DIV expression .)
    NUM             reduce using rule 13 (expression -> expression DIV expression .)
    $end            reduce using rule 13 (expression -> expression DIV expression .)
    RBR             reduce using rule 13 (expression -> expression DIV expression .)

  ! SMCLN           [ shift and go to state 11 ]
  ! PLUS            [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! MUL             [ shift and go to state 14 ]
  ! DIV             [ shift and go to state 15 ]
  ! ID              [ shift and go to state 5 ]
  ! VAR             [ shift and go to state 6 ]
  ! IF              [ shift and go to state 7 ]
  ! FUNC            [ shift and go to state 8 ]
  ! NUM             [ shift and go to state 9 ]

    expression                     shift and go to state 10
    decl_function                  shift and go to state 2
    number                         shift and go to state 3
    expression_list                shift and go to state 4

state 25

    (5) expression -> ID LPAR RPAR .

    SMCLN           reduce using rule 5 (expression -> ID LPAR RPAR .)
    PLUS            reduce using rule 5 (expression -> ID LPAR RPAR .)
    MINUS           reduce using rule 5 (expression -> ID LPAR RPAR .)
    MUL             reduce using rule 5 (expression -> ID LPAR RPAR .)
    DIV             reduce using rule 5 (expression -> ID LPAR RPAR .)
    ID              reduce using rule 5 (expression -> ID LPAR RPAR .)
    VAR             reduce using rule 5 (expression -> ID LPAR RPAR .)
    IF              reduce using rule 5 (expression -> ID LPAR RPAR .)
    FUNC            reduce using rule 5 (expression -> ID LPAR RPAR .)
    NUM             reduce using rule 5 (expression -> ID LPAR RPAR .)
    $end            reduce using rule 5 (expression -> ID LPAR RPAR .)
    RBR             reduce using rule 5 (expression -> ID LPAR RPAR .)


state 26

    (14) expression -> ID ASSIGN expression .
    (1) expression -> expression . SMCLN
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . MUL expression
    (13) expression -> expression . DIV expression
    (6) expression_list -> expression . expression
    (1) expression -> . expression SMCLN
    (2) expression -> . decl_function
    (3) expression -> . number
    (4) expression -> . expression_list
    (5) expression -> . ID LPAR RPAR
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression MUL expression
    (13) expression -> . expression DIV expression
    (14) expression -> . ID ASSIGN expression
    (15) expression -> . VAR ID
    (23) expression -> . IF LPAR condition RPAR compound
    (24) expression -> . IF LPAR condition RPAR compound ELSE compound
    (7) decl_function -> . FUNC ID LPAR RPAR compound
    (16) number -> . NUM
    (6) expression_list -> . expression expression

    SMCLN           reduce using rule 14 (expression -> ID ASSIGN expression .)
    ID              reduce using rule 14 (expression -> ID ASSIGN expression .)
    VAR             reduce using rule 14 (expression -> ID ASSIGN expression .)
    IF              reduce using rule 14 (expression -> ID ASSIGN expression .)
    FUNC            reduce using rule 14 (expression -> ID ASSIGN expression .)
    NUM             reduce using rule 14 (expression -> ID ASSIGN expression .)
    $end            reduce using rule 14 (expression -> ID ASSIGN expression .)
    RBR             reduce using rule 14 (expression -> ID ASSIGN expression .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MUL             shift and go to state 14
    DIV             shift and go to state 15

  ! PLUS            [ reduce using rule 14 (expression -> ID ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 14 (expression -> ID ASSIGN expression .) ]
  ! MUL             [ reduce using rule 14 (expression -> ID ASSIGN expression .) ]
  ! DIV             [ reduce using rule 14 (expression -> ID ASSIGN expression .) ]
  ! SMCLN           [ shift and go to state 11 ]
  ! ID              [ shift and go to state 5 ]
  ! VAR             [ shift and go to state 6 ]
  ! IF              [ shift and go to state 7 ]
  ! FUNC            [ shift and go to state 8 ]
  ! NUM             [ shift and go to state 9 ]

    expression                     shift and go to state 10
    decl_function                  shift and go to state 2
    number                         shift and go to state 3
    expression_list                shift and go to state 4

state 27

    (23) expression -> IF LPAR condition . RPAR compound
    (24) expression -> IF LPAR condition . RPAR compound ELSE compound

    RPAR            shift and go to state 31


state 28

    (17) condition -> number . EQUAL number
    (18) condition -> number . GREATER number
    (19) condition -> number . LESSER number

    EQUAL           shift and go to state 32
    GREATER         shift and go to state 33
    LESSER          shift and go to state 34


state 29

    (20) condition -> ID . EQUAL ID
    (21) condition -> ID . GREATER ID
    (22) condition -> ID . LESSER ID

    EQUAL           shift and go to state 35
    GREATER         shift and go to state 36
    LESSER          shift and go to state 37


state 30

    (7) decl_function -> FUNC ID LPAR . RPAR compound

    RPAR            shift and go to state 38


state 31

    (23) expression -> IF LPAR condition RPAR . compound
    (24) expression -> IF LPAR condition RPAR . compound ELSE compound
    (8) compound -> . LBR expression RBR
    (9) compound -> . LBR RBR

    LBR             shift and go to state 40

    compound                       shift and go to state 39

state 32

    (17) condition -> number EQUAL . number
    (16) number -> . NUM

    NUM             shift and go to state 9

    number                         shift and go to state 41

state 33

    (18) condition -> number GREATER . number
    (16) number -> . NUM

    NUM             shift and go to state 9

    number                         shift and go to state 42

state 34

    (19) condition -> number LESSER . number
    (16) number -> . NUM

    NUM             shift and go to state 9

    number                         shift and go to state 43

state 35

    (20) condition -> ID EQUAL . ID

    ID              shift and go to state 44


state 36

    (21) condition -> ID GREATER . ID

    ID              shift and go to state 45


state 37

    (22) condition -> ID LESSER . ID

    ID              shift and go to state 46


state 38

    (7) decl_function -> FUNC ID LPAR RPAR . compound
    (8) compound -> . LBR expression RBR
    (9) compound -> . LBR RBR

    LBR             shift and go to state 40

    compound                       shift and go to state 47

state 39

    (23) expression -> IF LPAR condition RPAR compound .
    (24) expression -> IF LPAR condition RPAR compound . ELSE compound

    SMCLN           reduce using rule 23 (expression -> IF LPAR condition RPAR compound .)
    PLUS            reduce using rule 23 (expression -> IF LPAR condition RPAR compound .)
    MINUS           reduce using rule 23 (expression -> IF LPAR condition RPAR compound .)
    MUL             reduce using rule 23 (expression -> IF LPAR condition RPAR compound .)
    DIV             reduce using rule 23 (expression -> IF LPAR condition RPAR compound .)
    ID              reduce using rule 23 (expression -> IF LPAR condition RPAR compound .)
    VAR             reduce using rule 23 (expression -> IF LPAR condition RPAR compound .)
    IF              reduce using rule 23 (expression -> IF LPAR condition RPAR compound .)
    FUNC            reduce using rule 23 (expression -> IF LPAR condition RPAR compound .)
    NUM             reduce using rule 23 (expression -> IF LPAR condition RPAR compound .)
    $end            reduce using rule 23 (expression -> IF LPAR condition RPAR compound .)
    RBR             reduce using rule 23 (expression -> IF LPAR condition RPAR compound .)
    ELSE            shift and go to state 48


state 40

    (8) compound -> LBR . expression RBR
    (9) compound -> LBR . RBR
    (1) expression -> . expression SMCLN
    (2) expression -> . decl_function
    (3) expression -> . number
    (4) expression -> . expression_list
    (5) expression -> . ID LPAR RPAR
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression MUL expression
    (13) expression -> . expression DIV expression
    (14) expression -> . ID ASSIGN expression
    (15) expression -> . VAR ID
    (23) expression -> . IF LPAR condition RPAR compound
    (24) expression -> . IF LPAR condition RPAR compound ELSE compound
    (7) decl_function -> . FUNC ID LPAR RPAR compound
    (16) number -> . NUM
    (6) expression_list -> . expression expression

    RBR             shift and go to state 50
    ID              shift and go to state 5
    VAR             shift and go to state 6
    IF              shift and go to state 7
    FUNC            shift and go to state 8
    NUM             shift and go to state 9

    expression                     shift and go to state 49
    decl_function                  shift and go to state 2
    number                         shift and go to state 3
    expression_list                shift and go to state 4

state 41

    (17) condition -> number EQUAL number .

    RPAR            reduce using rule 17 (condition -> number EQUAL number .)


state 42

    (18) condition -> number GREATER number .

    RPAR            reduce using rule 18 (condition -> number GREATER number .)


state 43

    (19) condition -> number LESSER number .

    RPAR            reduce using rule 19 (condition -> number LESSER number .)


state 44

    (20) condition -> ID EQUAL ID .

    RPAR            reduce using rule 20 (condition -> ID EQUAL ID .)


state 45

    (21) condition -> ID GREATER ID .

    RPAR            reduce using rule 21 (condition -> ID GREATER ID .)


state 46

    (22) condition -> ID LESSER ID .

    RPAR            reduce using rule 22 (condition -> ID LESSER ID .)


state 47

    (7) decl_function -> FUNC ID LPAR RPAR compound .

    SMCLN           reduce using rule 7 (decl_function -> FUNC ID LPAR RPAR compound .)
    PLUS            reduce using rule 7 (decl_function -> FUNC ID LPAR RPAR compound .)
    MINUS           reduce using rule 7 (decl_function -> FUNC ID LPAR RPAR compound .)
    MUL             reduce using rule 7 (decl_function -> FUNC ID LPAR RPAR compound .)
    DIV             reduce using rule 7 (decl_function -> FUNC ID LPAR RPAR compound .)
    ID              reduce using rule 7 (decl_function -> FUNC ID LPAR RPAR compound .)
    VAR             reduce using rule 7 (decl_function -> FUNC ID LPAR RPAR compound .)
    IF              reduce using rule 7 (decl_function -> FUNC ID LPAR RPAR compound .)
    FUNC            reduce using rule 7 (decl_function -> FUNC ID LPAR RPAR compound .)
    NUM             reduce using rule 7 (decl_function -> FUNC ID LPAR RPAR compound .)
    $end            reduce using rule 7 (decl_function -> FUNC ID LPAR RPAR compound .)
    RBR             reduce using rule 7 (decl_function -> FUNC ID LPAR RPAR compound .)


state 48

    (24) expression -> IF LPAR condition RPAR compound ELSE . compound
    (8) compound -> . LBR expression RBR
    (9) compound -> . LBR RBR

    LBR             shift and go to state 40

    compound                       shift and go to state 51

state 49

    (8) compound -> LBR expression . RBR
    (1) expression -> expression . SMCLN
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression
    (12) expression -> expression . MUL expression
    (13) expression -> expression . DIV expression
    (6) expression_list -> expression . expression
    (1) expression -> . expression SMCLN
    (2) expression -> . decl_function
    (3) expression -> . number
    (4) expression -> . expression_list
    (5) expression -> . ID LPAR RPAR
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . expression MUL expression
    (13) expression -> . expression DIV expression
    (14) expression -> . ID ASSIGN expression
    (15) expression -> . VAR ID
    (23) expression -> . IF LPAR condition RPAR compound
    (24) expression -> . IF LPAR condition RPAR compound ELSE compound
    (7) decl_function -> . FUNC ID LPAR RPAR compound
    (16) number -> . NUM
    (6) expression_list -> . expression expression

    RBR             shift and go to state 52
    SMCLN           shift and go to state 11
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    MUL             shift and go to state 14
    DIV             shift and go to state 15
    ID              shift and go to state 5
    VAR             shift and go to state 6
    IF              shift and go to state 7
    FUNC            shift and go to state 8
    NUM             shift and go to state 9

    expression                     shift and go to state 10
    decl_function                  shift and go to state 2
    number                         shift and go to state 3
    expression_list                shift and go to state 4

state 50

    (9) compound -> LBR RBR .

    ELSE            reduce using rule 9 (compound -> LBR RBR .)
    SMCLN           reduce using rule 9 (compound -> LBR RBR .)
    PLUS            reduce using rule 9 (compound -> LBR RBR .)
    MINUS           reduce using rule 9 (compound -> LBR RBR .)
    MUL             reduce using rule 9 (compound -> LBR RBR .)
    DIV             reduce using rule 9 (compound -> LBR RBR .)
    ID              reduce using rule 9 (compound -> LBR RBR .)
    VAR             reduce using rule 9 (compound -> LBR RBR .)
    IF              reduce using rule 9 (compound -> LBR RBR .)
    FUNC            reduce using rule 9 (compound -> LBR RBR .)
    NUM             reduce using rule 9 (compound -> LBR RBR .)
    $end            reduce using rule 9 (compound -> LBR RBR .)
    RBR             reduce using rule 9 (compound -> LBR RBR .)


state 51

    (24) expression -> IF LPAR condition RPAR compound ELSE compound .

    SMCLN           reduce using rule 24 (expression -> IF LPAR condition RPAR compound ELSE compound .)
    PLUS            reduce using rule 24 (expression -> IF LPAR condition RPAR compound ELSE compound .)
    MINUS           reduce using rule 24 (expression -> IF LPAR condition RPAR compound ELSE compound .)
    MUL             reduce using rule 24 (expression -> IF LPAR condition RPAR compound ELSE compound .)
    DIV             reduce using rule 24 (expression -> IF LPAR condition RPAR compound ELSE compound .)
    ID              reduce using rule 24 (expression -> IF LPAR condition RPAR compound ELSE compound .)
    VAR             reduce using rule 24 (expression -> IF LPAR condition RPAR compound ELSE compound .)
    IF              reduce using rule 24 (expression -> IF LPAR condition RPAR compound ELSE compound .)
    FUNC            reduce using rule 24 (expression -> IF LPAR condition RPAR compound ELSE compound .)
    NUM             reduce using rule 24 (expression -> IF LPAR condition RPAR compound ELSE compound .)
    $end            reduce using rule 24 (expression -> IF LPAR condition RPAR compound ELSE compound .)
    RBR             reduce using rule 24 (expression -> IF LPAR condition RPAR compound ELSE compound .)


state 52

    (8) compound -> LBR expression RBR .

    ELSE            reduce using rule 8 (compound -> LBR expression RBR .)
    SMCLN           reduce using rule 8 (compound -> LBR expression RBR .)
    PLUS            reduce using rule 8 (compound -> LBR expression RBR .)
    MINUS           reduce using rule 8 (compound -> LBR expression RBR .)
    MUL             reduce using rule 8 (compound -> LBR expression RBR .)
    DIV             reduce using rule 8 (compound -> LBR expression RBR .)
    ID              reduce using rule 8 (compound -> LBR expression RBR .)
    VAR             reduce using rule 8 (compound -> LBR expression RBR .)
    IF              reduce using rule 8 (compound -> LBR expression RBR .)
    FUNC            reduce using rule 8 (compound -> LBR expression RBR .)
    NUM             reduce using rule 8 (compound -> LBR expression RBR .)
    $end            reduce using rule 8 (compound -> LBR expression RBR .)
    RBR             reduce using rule 8 (compound -> LBR expression RBR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SMCLN in state 10 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 10 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 10 resolved as shift
WARNING: shift/reduce conflict for MUL in state 10 resolved as shift
WARNING: shift/reduce conflict for DIV in state 10 resolved as shift
WARNING: shift/reduce conflict for ID in state 10 resolved as shift
WARNING: shift/reduce conflict for VAR in state 10 resolved as shift
WARNING: shift/reduce conflict for IF in state 10 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 10 resolved as shift
WARNING: shift/reduce conflict for NUM in state 10 resolved as shift
